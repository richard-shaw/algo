/* Generated by powerful Codeforces Tool
 * Author: RichardShaw
 * Time: 2021-10-28 23:36:28
 */
#pragma GCC optimize("Ofast", "inline", "-ffast-math")
#pragma GCC target("avx,sse2,sse3,sse4,mmx")
#include<bits/stdc++.h>
using namespace std;
void fast_stream() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
}
#define int long long
const int INF = 0x7fffffffffffffff;
const int MAXN = 1e5 + 9;
int A[2001], tmp[2001], n, q, Ans[MAXN];
struct Question {
    int idx, x, k;
} Q[MAXN];
bool cmp(Question &q1, Question &q2) {
    return q1.k < q2.k;
}

bool trans() {
    bool same = true;
    for (int i = 0; i <= 2000; i++) tmp[i] = 0;
    for (int i = 1; i <= n; i++) tmp[A[i]]++;
    for (int i = 1; i <= n; i++) {
        if (A[i] == tmp[A[i]]) same = false;
        A[i] = tmp[A[i]];
    }
    return same;
}

void solve () {
    cin >> n;
//    n = 2000;
    for (int i = 1; i <= n; i++) cin >> A[i];
//    for (int i = 1; i <= n; i++) A[i] = rand() % 2000;
    cin >> q;
//    q = 100000;
    for (int i = 1; i <= q; i++) cin >> Q[i].x >> Q[i].k, Q[i].idx = i;
//    for (int i = 1; i <= q; i ++) Q[i].x = rand() % 1888 + 1, Q[i].k = rand() % 1000000000, Q[i].idx = i;
    sort(Q + 1, Q + 1 + q, cmp);
    int step = 0;
    for (int i = 1; i <= q; i++) {
        while (Q[i].k > step) {
            bool same = trans();
            if (same) step = Q[i].k;
            else step++;
        }
        Ans[Q[i].idx] = A[Q[i].x];
    }
    for (int i = 1; i <= q; i++) cout << Ans[i] << endl;
}

signed main() {
    srand(time(0));
    int t;
    cin >> t;
//    t = 1;
//    clock_t t1 = clock();
    while (t--) {
        solve();
    }
//    clock_t t2 = clock();
//    cout << (double)(t2-t1) / CLOCKS_PER_SEC << endl;
}
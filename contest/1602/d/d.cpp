/* Generated by powerful Codeforces Tool
 * Author: RichardShaw

 * Time: 2021-10-29 16:24:46
 */
//#pragma GCC optimize("Ofast", "inline", "-ffast-math")
//#pragma GCC target("avx,sse2,sse3,sse4,mmx")
#include<bits/stdc++.h>
using namespace std;
void fast_stream() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
}
#define int long long
const int INF = 0x7fffffffffffff;
const int MAXN = 3e5 + 9;
int tmp[MAXN], a[MAXN], b[MAXN], N, d[MAXN];
// dp[h] = min(dp[h + i - b[h+i]] + 1) (0 <= i < a[h])
int dp(int h) {
    if (~tmp[h]) return tmp[h];
    if (h <= 0) return 0;
    if (h <= a[h]) { d[h] = 0; return 1; }
    int ans = INF;
    for (int i = 0; i <= a[h]; i++) {
        if (b[h-i] >= i) continue;
        if (dp(min(h-i+b[h-i], N)) + 1 < ans) {
            ans = dp(min(h-i+b[h-i], N))+1;
            d[h] = min(h-i, N);
        }
    }
    return tmp[h] = ans;
}
void solve () {
    memset(tmp, -1, sizeof(tmp));
    cin >> N;
    for (int i = 1; i <= N; i++) cin >> a[i];
    for (int j = 1; j <= N; j++) cin >> b[j];
    int ans = dp(N);
    if (ans >= INF) { cout << -1 << endl; return; }
    cout << ans << endl;
    for (int i = 1; i <= ans; i++) {
        cout << d[N];
        N = d[N];
        if (i == ans) cout << endl;
        else cout << ' ';
    }
}

signed main() {
    fast_stream();
    int t;
//    cin >> t;
    t = 1;
    while (t--) {
        solve();
    }
}
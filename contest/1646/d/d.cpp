/* Generated by powerful Codeforces Tool
 * Author: shaw
 * Time: 2022-03-04 23:35:06
 */
//#pragma GCC optimize("Ofast", "inline", "-ffast-math")
//#pragma GCC target("avx,sse2,sse3,sse4,mmx")
#include<bits/stdc++.h>
using namespace std;
void fast_stream() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
}
#define int long long
const int INF = 0x7fffffffffffffff;
const int MAXN = 2e5 + 9;
vector<int> E[MAXN], LEVEL[MAXN];
int N, vst[MAXN], level[MAXN], w[MAXN], MAX_LEVEL, fa[MAXN], ans_w[MAXN];

void init() {
    fast_stream();
    for (int i = 0; i < MAXN; i++) E[i].clear(), LEVEL[i].clear();
    memset(vst, 0, sizeof(vst));
    MAX_LEVEL = 0;
    memset(fa, -1, sizeof(fa));
}

void dfs(int u, int l) {
    if (vst[u]) return;
    vst[u] = 1;
    level[u] = l;
    MAX_LEVEL = max(MAX_LEVEL, l);
    LEVEL[l].push_back(u);
    for (int v : E[u]) {
        fa[v] = u;
        dfs(v, l + 1);
    }
}

pair<int, int> get_ans() {
    int CNT = 0, SUM = 0;
    for (int i = 1; i <= N; i++) {
        int p = 0;
        for (int u : E[i]) {
            p += w[u];
        }
        SUM += w[i];
        CNT += (p == w[i]);
    }
    return make_pair(SUM, CNT);
}

signed main() {
    init();
    cin >> N;
    for (int i = 1; i < N; i++) {
        int u, v;
        cin >> u >> v;
        E[u].push_back(v);
        E[v].push_back(u);
    }
    dfs(1, 1);

    for (int l = 1; l <= MAX_LEVEL; l++) {
        for (int u : LEVEL[l]) {
            w[u] = l & 1 ? E[u].size() : 1;
        }
    }
    pair<int, int> ANS1 = get_ans();
    for (int i = 1; i <= N; i++) ans_w[i] = w[i];
    for (int l = 1; l <= MAX_LEVEL; l++) {
        for (int u : LEVEL[l]) {
            w[u] = l & 1 ? 1 : E[u].size();
        }
    }
    pair<int, int> ANS2 = get_ans();
    if (ANS2.second > ANS1.second || (ANS2.second == ANS1.second && ANS2.first < ANS1.first)) {
        ANS1 = ANS2;
        for (int i = 1; i <= N; i++) ans_w[i] = w[i];
    }
    for (int i = 1; i <= N; i++) w[i] = 1;
    ANS2 = get_ans();
    if (ANS2.second > ANS1.second || (ANS2.second == ANS1.second && ANS2.first < ANS1.first)) {
        ANS1 = ANS2;
        for (int i = 1; i <= N; i++) ans_w[i] = w[i];
    }
    cout << ANS1.second << ' ' << ANS1.first << endl;
    for (int i = 1; i < N; i++) cout << ans_w[i] << ' ';
    cout << ans_w[N] << endl;
}
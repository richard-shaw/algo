/* Generated by powerful Codeforces Tool
 * Author: shaw
 * Time: 2022-03-04 23:35:06
 */
#pragma GCC optimize("Ofast", "inline", "-ffast-math")
#pragma GCC target("avx,sse2,sse3,sse4,mmx")
#include<bits/stdc++.h>
using namespace std;
void fast_stream() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
}
#define int long long
const int MXN = 1e12;
set<int> S;
int A[60], SUM[60];
int Ans;
void dfs(int x, int idx, int c) {
    if (x > SUM[idx]) return;
    if (c >= Ans) return;
    if (idx == 0) {
        if (x == 0) Ans = min(Ans, c);
        return;
    }
    if (x == 0) {
        Ans = min(Ans, c);
        return;
    }
    dfs(x, idx - 1, c);
    if (x >= A[idx]) {
        dfs(x - A[idx], idx - 1, c + 1);
    }
}

void solve() {
    int N;
    cin >> N;
    Ans = 1000;
    dfs(N, 52, 0);
    cout << (Ans == 1000 ? -1 : Ans) << endl;
}

signed main() {
    S.clear();
    int d = 1;
    while (d <= MXN) {
        S.insert(d);
        d <<= 1;
    }
    d = 1;
    int fi = 1;
    while (fi <= MXN) {
        S.insert(fi);
        d++;
        fi *= d;
    }
    int i = 0;
    for (int s : S) { A[++i] = s; }
    SUM[0] = 0;
    for (int j = 1; j <= 52; j++) SUM[j] = SUM[j-1] + A[j];

    fast_stream();
    int t;
    cin >> t;
    while (t--) {
        solve();
    }
}
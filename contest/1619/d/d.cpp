/* Generated by powerful Codeforces Tool
 * Author: RichardShaw
 * Time: 2021-12-22 17:04:07
 */
#pragma GCC optimize("Ofast", "inline", "-ffast-math")
#pragma GCC target("avx,sse2,sse3,sse4,mmx")
#include<bits/stdc++.h>
using namespace std;
void fast_stream() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
}
#define int long long
const int INF = 0x7fffffffffffffff;
const int MAXN = 1e5 + 9;
int M, N, L;
vector<int> P[MAXN];
set<int> tmp;
int S[MAXN];
bool judge(int Ans) {
    for (int i = 0; i <= N-1; i++) {
        bool ok = false;
        for (int j = 1; j <= M; j++) {
            if (P[j][i] >= Ans) { ok = true; break; }
        }
        if (!ok) return false;
    }
    bool ok = false;
    for (int j = 1; j <= M; j++) {
        int cnt = 0;
        for (int i = 0; i <= N - 1; i++) {
            cnt += (P[j][i] >= Ans);
        }
        if (cnt >= 2) { ok = true; break; }
    }
    return ok;
}
void solve () {
    cin >> M >> N;
    tmp.clear();
    for (int i = 1; i <= M; i++) P[i].clear();
    for (int i = 1; i <= M; i++) for (int j = 1; j <= N; j++) { int p; cin >> p; P[i].push_back(p); tmp.insert(p); }
    int idx = 0;
    for (int v : tmp) S[++idx] = v;
    int l = 1, r = tmp.size();
    while (r - l > 1) {
        int mid = (l + r) >> 1;
        if (judge(S[mid])) l = mid;
        else r = mid - 1;
    }
    if (judge(S[r])) cout << S[r] << endl;
    else cout << S[l] << endl;
}

signed main() {
    fast_stream();
    int t;
    cin >> t;
    while (t--) {
        solve();
    }
}
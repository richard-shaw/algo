/* Generated by powerful Codeforces Tool
 * Author: RichardShaw
 * Time: 2021-12-22 17:04:07
 */
#pragma GCC optimize("Ofast", "inline", "-ffast-math")
#pragma GCC target("avx,sse2,sse3,sse4,mmx")
#include<bits/stdc++.h>
using namespace std;
void fast_stream() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
}
#define int long long
const int INF = 0x7fffffffffffffff;
const int MAXN = 2e5 + 9;
int N, a[MAXN], MEX[MAXN], CNT[MAXN];
deque<int> gt;
void solve () {
    gt.clear();
    cin >> N;
    for (int i = 0; i <= N; i++) MEX[i] = 0;
    for (int i = 0; i < N; i++) cin >> a[i], CNT[a[i]]++;
    sort(a, a + N);
    for (int k = 1; k <= N; k++) {
        if (MEX[k-1] == -1) { MEX[k] = -1; continue; }
        if (a[k-1] >= k) MEX[k] = -1;
    }

    MEX[0] = CNT[0];
    for (int k = 1; k <= N; k++) {
        if (MEX[k] == -1) break;
        MEX[k] = CNT[k];
        for (int c = 1; c < CNT[k-1]; c++) gt.push_back(k-1);
        if (CNT[k-1] == 0) {
            MEX[k] += abs(gt.back() - (k-1));
            gt.pop_back();
        }
        MEX[k] += (MEX[k-1] - CNT[k-1]);
    }

    for (int i = 0; i < N; i++) cout << MEX[i] << ' ';
    cout << MEX[N] << endl;

    for (int i = 0; i < N; i++) CNT[a[i]]--;
}

signed main() {
    memset(CNT, 0, sizeof(CNT));
    fast_stream();
    int t;
    cin >> t;
    while (t--) {
        solve();
    }
}
/* Generated by powerful Codeforces Tool
 * Author: RichardShaw
 * Time: 2021-10-14 11:32:36
 */
#pragma GCC optimize("Ofast", "inline", "-ffast-math")
#pragma GCC target("avx,sse2,sse3,sse4,mmx")
#include<bits/stdc++.h>
using namespace std;
void fast_stream() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
}
#define int long long
const int INF = 0x7fffffffffffffff;
const int MAXN = 41;
// dp[N][la][r][b] 前N个数位，其中选la个为红，红数%A结果为r， 黑数%B结果为b的种类数
// dp[N][la][r][b] 添加N+1为红，-> dp[N+1][la+1][(r*10+c)%A][b]
//                 添加N+1为黑，-> dp[N+1][la][r][(b*10+c)%B]
int dp[MAXN][MAXN][MAXN][MAXN];
int impl[MAXN][MAXN][MAXN][MAXN];
string get_str(int K, int N) {
    string a = "";
    for (int i = 1; i <= N; i++) {
        if (K & 1) a = "R" + a;
        else a = "B" + a;
        K >>= 1;
    }
    return a;
}
void solve() {
    int N, A, B; string S;
    cin >> N >> A >> B >> S;
    for (int i = 0; i <= N; i++) for (int j = 0; j <= N; j++) for (int k = 0; k < MAXN; k++) for (int t = 0; t < MAXN; t++) dp[i][j][k][t] = -1;
    dp[0][0][0][0] = 1, impl[0][0][0][0] = 0;
    for (int n = 0; n < N; n++) {
        for (int la = 0; la <= n; la++) {
            for (int r = 0; r < A; r++) {
                for (int b = 0; b < B; b++) {
                    if (dp[n][la][r][b] == -1) continue;
                    int _r = (r * 10 + (S[n] - '0')) % A, _b = (b * 10 + (S[n] - '0')) % B;
                    if (dp[n+1][la+1][_r][b] == -1) dp[n+1][la+1][_r][b] = 0;
                    if (dp[n+1][la][r][_b] == -1) dp[n+1][la][r][_b] = 0;
                    dp[n+1][la+1][_r][b] += dp[n][la][r][b];
                    dp[n+1][la][r][_b] += dp[n][la][r][b];
                    impl[n+1][la+1][_r][b] = (impl[n][la][r][b] << 1) + 1;
                    impl[n+1][la][r][_b] = (impl[n][la][r][b] << 1);
                }
            }
        }
    }


    int ans = 1e9; string res = "";
    for (int la = 1; la < N; la++) {
        if (dp[N][la][0][0] > 0) {
            if (abs(2 * la - N) < ans) {
                ans = abs(2 * la - N);
                res = get_str(impl[N][la][0][0], N);
            }
        }
    }
    if (ans >= N) cout << -1 << endl;
    else cout << res << endl;
}
signed main() {
//    int t;
//    cin >> t;
//    clock_t t1 = clock();
    memset(dp, -1, sizeof(dp));
    fast_stream();
    int t;
    cin >> t;
    while (t--) {
        solve();
    }
//    clock_t t2 = clock();
//    cout << ((double)(t2-t1) / CLOCKS_PER_SEC) << endl;
}
/* Generated by powerful Codeforces Tool
 * Author: RichardShaw
 * Time: 2021-11-24 15:41:41
 */
#pragma GCC optimize("Ofast", "inline", "-ffast-math")
#pragma GCC target("avx,sse2,sse3,sse4,mmx")
#include<bits/stdc++.h>
using namespace std;
void fast_stream() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
}
#define int long long
const int INF = 0x7fffffffffffffff;
const int MAXN = 1e6 + 9;
int N, cnt[MAXN][3];
string S;
int get_num(int l, int r, char c) {
    return cnt[r][c-'a'] - cnt[l-1][c-'a'];
}
void solve () {
    cin >> N >> S;
    for (int i = 0; i <= N; i++) for (int j = 0; j < 3; j++) cnt[i][j] = 0;
    for (int i = 1; i <= N; i++) for (int j = 0; j < 3; j++) cnt[i][j] = cnt[i-1][j] + (S[i-1]-'a' == j);
    int Ans = INF;
    for (int l = 1; l <= N; l++) {
        for (int r = l + 1; r <= N; ) {
            if (r - l + 1 >= Ans) break;
            int ca = get_num(l, r, 'a'), cb = get_num(l, r, 'b'), cc = get_num(l, r, 'c');
            if (ca > cb && ca > cc) {
                Ans = min(Ans, r - l + 1);
                break;
            }
            int q = max(cb - ca, cc - ca) + 1;
            r += q;
        }
    }
    cout << (Ans == INF ? -1 : Ans) << endl;
}

signed main() {
    fast_stream();
    int t;
    cin >> t;
    while (t--) {
        solve();
    }
}
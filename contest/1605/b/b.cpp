/* Generated by powerful Codeforces Tool
 * Author: RichardShaw
 * Time: 2021-11-24 15:41:41
 */
#pragma GCC optimize("Ofast", "inline", "-ffast-math")
#pragma GCC target("avx,sse2,sse3,sse4,mmx")
#include<bits/stdc++.h>
using namespace std;
void fast_stream() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
}
#define int long long
const int INF = 0x7fffffffffffffff;
const int MAXN = 1004;
vector<int> order[MAXN], v0, v1;
bool is_increase(string s) {
    int l = s.length();
    bool zero = true;
    for (int i = 0; i < l; i++) {
        if (s[i] == '1') zero = false;
        if (s[i] == '0' && !zero) return false;
    }
    return true;
}
void solve () {
    int N;
    string S;
    cin >> N >> S;
    for (int i = 1; i <= N; i++) order[i].clear();
    int Ans = 0;
    while (!is_increase(S)) {
        Ans++;
        v0.clear(), v1.clear();
        for (int i = 0; i < N; i++) {
            if (S[i] == '1') v1.push_back(i);
            else v0.push_back(i);
        }
        for (int i = 0; i < v1.size(); i++) {
            int j = v0.size() - 1  - i;
            if (j < 0) break;
            if (v1[i] > v0[j]) break;
            order[Ans].push_back(v1[i]+1);
            order[Ans].push_back(v0[j]+1);
            swap(S[v1[i]], S[v0[j]]);
        }
    }
    cout << Ans << endl;
    for (int i = 1; i <= Ans; i++) {
        cout << order[i].size() << ' ';
        sort(order[i].begin(), order[i].end());
        for (int j = 0; j < order[i].size(); j++) {
            cout << order[i][j];
            if (j == order[i].size() - 1) cout << endl;
            else cout << ' ';
        }
    }
}

signed main() {
    fast_stream();
    int t;
    cin >> t;
    while (t--) {
        solve();
    }
}
/* Generated by powerful Codeforces Tool
 * Author: RichardShaw
 * Time: 2021-11-24 15:41:41
 */
//#pragma GCC optimize("Ofast", "inline", "-ffast-math")
//#pragma GCC target("avx,sse2,sse3,sse4,mmx")
#include<bits/stdc++.h>
using namespace std;
void fast_stream() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
}
#define int long long
const int INF = 0x7fffffffffffffff;
const int MAXN = 2e5 + 9;
vector<int> E[MAXN];
int N, visit[MAXN], color[MAXN], LOG[MAXN], R1[MAXN], R0[MAXN], TMP[22];

void get_binary(int u) {
    memset(TMP, 0, sizeof(TMP));
    int base = 1;
    while (u > 0) {
        if (u & 1) TMP[base] = 1;
        base++;
        u >>= 1;
    }
}

void dfs(int u, int c) {
    visit[u] = true;
    color[u] = c;
    for (int v : E[u]) {
        if (visit[v]) continue;
        dfs(v, 1 - c);
    }
}
void solve () {
    cin >> N;
    for (int i = 1; i <= N; i++) E[i].clear(), visit[i] = false;
    for (int i = 1; i < N; i++) {
        int u, v;
        cin >> u >> v;
        E[u].push_back(v);
        E[v].push_back(u);
    }
    dfs(1, 1);
    int color_1_cnt = 0;
    for (int i = 1; i <= N; i++) color_1_cnt += color[i];

    int cnt1 = 0, cnt0 = 0, N0 = N;
    if (N != ((1 << LOG[N]) - 1)) {
        int lft = N - (1 << (LOG[N] - 1)) + 1;
        if (color_1_cnt >= lft) {
            color_1_cnt -= lft;
            for (int num = N; num > N - lft; num--) R1[++cnt1] = num;
            N -= lft;
        }
    }
    get_binary(color_1_cnt);
    for (int i = 1; i <= N; i++) {
        int idx = LOG[i];
        if (TMP[idx] == 1) R1[++cnt1] = i;
        else R0[++cnt0] = i;
    }
    for (int i = 1; i <= N0; i++) {
        if (color[i] == 1) cout << R1[cnt1--];
        else cout << R0[cnt0--];
        if (i == N0) cout << endl;
        else cout << ' ';
    }
}

signed main() {
    for (int i = 1;; i++) {
        int st = 1 << (i - 1), ed = 1 << i;
        if (st >= MAXN) break;
        for (int j = st; j < min(ed, MAXN+1); j++) LOG[j] = i;
    }
    fast_stream();
    int t;
    cin >> t;
    while (t--) {
        solve();
    }
}
/* Generated by powerful Codeforces Tool
 * Author: RichardShaw
 * Time: 2021-11-18 13:46:30
 */
#pragma GCC optimize("Ofast", "inline", "-ffast-math")
#pragma GCC target("avx,sse2,sse3,sse4,mmx")
#include<bits/stdc++.h>
using namespace std;
void fast_stream() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
}
#define int long long
const int INF = 0x7fffffffffffffff;
const int MAXN = 2003;
int N, M, dis[MAXN][MAXN], visit[MAXN][MAXN], dx[4] = {0, 0, 1, -1}, dy[4] = {1, -1, 0, 0}, last;
string road[MAXN];
stack<pair<int, int>> dfs_stack;
inline int dire(int i, int j) {
    if (road[i][j] == 'U') return 3;
    if (road[i][j] == 'D') return 2;
    if (road[i][j] == 'L') return 1;
    if (road[i][j] == 'R') return 0;
}
void dfs(int start_i, int start_j) {
    while (!dfs_stack.empty()) dfs_stack.pop();
    dfs_stack.push({start_i, start_j});
    for (int deep = 0;;deep++) {
        int i = dfs_stack.top().first, j = dfs_stack.top().second;
        visit[i][j] = deep;
        int _i = i + dx[dire(i, j)], _j = j + dy[dire(i, j)];
        if (_i < 0 || _i >= N || _j < 0 || _j >= M) { dis[i][j] = 1; break; }
        if (dis[_i][_j] != -1) { dis[i][j] = dis[_i][_j] + 1; break; }
        if (visit[_i][_j] != -1) { dis[i][j] = deep - visit[_i][_j] + 1; last = visit[_i][_j]; break; }
        dfs_stack.push({_i, _j});
    }
    visit[dfs_stack.top().first][dfs_stack.top().second] = -1;
    dfs_stack.pop();
    while (!dfs_stack.empty()) {
        int i = dfs_stack.top().first, j = dfs_stack.top().second;
        int _i = i + dx[dire(i, j)], _j = j + dy[dire(i, j)];
        if (last != -1 && visit[i][j] >= last) dis[i][j] = dis[_i][_j];
        else dis[i][j] = dis[_i][_j] + 1;
        visit[i][j] = -1;
        dfs_stack.pop();
    }
}
void solve () {
    cin >> N >> M;
    for (int i = 0; i < N; i++) cin >> road[i];
    for (int i = 0; i < N; i++) for (int j = 0; j < M; j++) dis[i][j] = visit[i][j] = -1;
    for (int i = 0; i < N; i++) for (int j = 0; j < M; j++) if (dis[i][j] == -1) { last = -1; dfs(i, j); }
    int mx = -1, _i, _j;
    for (int i = 0; i < N; i ++) for (int j = 0; j < M; j++) if (dis[i][j] > mx) mx = dis[i][j], _i = i, _j = j;
    cout << (_i + 1) << ' ' << (_j + 1) << ' ' << mx << endl;
}

signed main() {
    int t;
    cin >> t;
    while (t--) {
        solve();
    }
}
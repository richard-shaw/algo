/* Generated by powerful Codeforces Tool
 * Author: RichardShaw
 * Time: 2021-11-18 13:46:30
 */
#pragma GCC optimize("Ofast", "inline", "-ffast-math")
#pragma GCC target("avx,sse2,sse3,sse4,mmx")
#include<bits/stdc++.h>
using namespace std;
void fast_stream() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
}
#define int long long
const int INF = 0x7fffffffffffffff;
const int MAXN = 2e5 + 9;
int N, x[MAXN], y[MAXN];
struct Dish {
    int id, a, b, m, l, r, flag;
    void read(int i) {
        id = i;
        cin >> a >> b >> m;
        flag = a + b - m;
        l = max(0ll, a - m);
        r = min(a, a + b - m);
    }
} D[MAXN];
bool cmp(Dish &a, Dish &b) {
    if (a.flag < b.flag) return true;
    else if (a.flag == b.flag) return a.r < b.r;
    else return false;
}

void solve () {
    cin >> N;
    for (int i = 1; i <= N; i++) D[i].read(i);
    sort(D+1, D+1+N, cmp);
    D[0].flag = -1;
    int cnt = 0, nowR = -1;
    for (int i = 1; i <= N; i++) {
        if (D[i].flag != D[i-1].flag || D[i].l > nowR) {
            cnt++; nowR = D[i].r;
        }
        x[D[i].id] = D[i].a - nowR;
        y[D[i].id] = D[i].m - x[D[i].id];
    }
    cout << cnt << endl;
    for (int i = 1; i <= N; i++) {
        cout << x[i] << ' ' << y[i] << endl;
    }
}

signed main() {
    fast_stream();
    int t;
    cin >> t;
    while (t--) {
        solve();
    }
}
/* Generated by powerful Codeforces Tool
 * Author: RichardShaw
 * Time: 2021-12-16 17:46:48
 */
#pragma GCC optimize("Ofast", "inline", "-ffast-math")
#pragma GCC target("avx,sse2,sse3,sse4,mmx")
#include<bits/stdc++.h>
using namespace std;
void fast_stream() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
}
#define int long long
const int INF = 1e10;
const int MAXN = 1e5 + 9;
int N, K, _[MAXN], arr[MAXN][2], tmp[105][105], sum[MAXN];
int dp(int r, int k) {
    if (r < k) return INF;
    if (k == 0) return sum[r];
    if (~tmp[r][k]) return tmp[r][k];
    int ans = INF;
    for (int l = r-1; l >= k-1; l--) {
        ans = min(ans, dp(l, k-1) + arr[l+1][0] / arr[k][1] + sum[r] - sum[l+1]);
    }
    return tmp[r][k] = ans;
}
void solve () {
    for (int i = 0; i < 105; i++) for (int j = 0; j < 105; j++) tmp[i][j] = -1;
    sum[0] = 0;
    cin >> N >> K;
    for (int i = 1; i <= N; i++) cin >> _[i];
    if (N == 1) { cout << _[1] << endl; return; }
    sort(_+1,_+1+N);
    for (int i = 1; i <= N; i++) {
        if (i <= N - K) arr[i][0] = _[i], sum[i] = sum[i-1] + _[i];
        else arr[i-(N-K)][1] = _[i];
    }
    cout << dp(N-K, K) << endl;
}

signed main() {
    fast_stream();
    int t;
    cin >> t;
    while (t--) {
        solve();
    }
}
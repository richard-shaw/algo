/* Generated by powerful Codeforces Tool
 * Author: RichardShaw
 * Time: 2021-10-03 22:35:05
 */
//#pragma GCC optimize("Ofast", "inline", "-ffast-math")
//#pragma GCC target("avx,sse2,sse3,sse4,mmx")
#include<bits/stdc++.h>
using namespace std;
void fast_stream() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
}
#define int long long
const int INF = 0x7fffffffffffffff;
const int MAXN = 1e5 + 9;
int a[MAXN], fa[MAXN], root = 1, visit[MAXN], _xor[MAXN];
vector<int> V[MAXN], V0[MAXN];

void dfs(int u) {
    visit[u] = 1;
    _xor[u] = a[u];
    for (int v : V[u]) {
        if (visit[v]) continue;
        fa[v] = u;
        dfs(v);
        _xor[u] ^= _xor[v];
        V0[u].push_back(v);
    }
}
int dfs1(int u) {
    if (_xor[u] == _xor[root]) return 1;
    for (int v : V0[u]) {
        if (dfs1(v) > 0) return 1;
    }
    return 0;
}
bool dfs3(int u) {
    bool ok = false;
    for (int v : V0[u]) {
        if (_xor[v] == _xor[root]) return true;
        ok = ok || dfs3(v);
    }
    return ok;
}

bool dfs2(int u) {
    if (_xor[u] == 0) return dfs3(u);
    for (int v : V0[u]) {
        if (dfs2(v)) return true;
    }
    return false;
}

void solve () {
    int n, k;
    cin >> n >> k;
    for (int i = 1; i <= n; i++) cin >> a[i];
    for (int i = 1; i < n; i++) {
        int u, v;
        cin >> u >> v;
        V[u].push_back(v);
        V[v].push_back(u);
    }
    dfs(root);
    if(_xor[root] == 0) cout << "YES" << endl;
    else if (k == 2) cout << "NO" << endl;
    else {
        // xor -> 0
        // xor -- xor
        int cnt = 0;
        for (int v : V0[root]) cnt += dfs1(v);
        if (cnt >= 2) cout << "YES" << endl;
        else {
            bool ok = false;
            for (int v : V0[root]) ok = ok || dfs2(v);
            if (ok) cout << "YES" << endl;
            else cout << "NO" << endl;
        }
    }
    for (int i = 1; i <= n; i++) V[i].clear(), visit[i] = 0, V0[i].clear();
}

signed main() {
    fast_stream();
    for (int i = 0; i < MAXN; i++) V[i].clear(), V0[i].clear();
    memset(visit, 0, sizeof(visit));
    int t;
    cin >> t;
    while (t--) {
        solve();
    }
}
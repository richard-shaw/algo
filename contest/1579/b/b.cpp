/* Generated by powerful Codeforces Tool
 * Author: RichardShaw
 * Time: 2021-09-28 22:35:02
 */
//#pragma GCC optimize("Ofast", "inline", "-ffast-math")
//#pragma GCC target("avx,sse2,sse3,sse4,mmx")
#include<bits/stdc++.h>
using namespace std;
void fast_stream() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
}
#define int long long
const int INF = 0x7fffffffffffffff;
const int MAXN = 55;
int arr[MAXN], ans[MAXN][3];

int find_mn(int l, int r) {
    int mn = 1e9 + 2312, d = -1;
    for (int i = l; i <= r; i++) {
        if (arr[i] < mn) {
            mn = arr[i];
            d = i;
        }
    }
    return d;
}

void _swap(int l, int r, int d) {
    deque<int> dq;
    while (!dq.empty()) dq.pop_back();
    for (int i = l; i <= r; i++) dq.push_back(arr[i]);
    while (d--) {
        dq.push_back(dq.front());
        dq.pop_front();
    }
    for (int i = l; i <= r; i++) {
        arr[i] = dq.front();
        dq.pop_front();
    }
}

void solve () {
    int N, sp = 0;
    cin >> N;
    for (int i = 1; i <= N; i++) cin >> arr[i];
    for (int i = 1; i <= N; i++) {
        int pos = find_mn(i, N);
        int d = pos - i;
        if (d == 0) continue;
        _swap(i, N, d);
        ans[++sp][0] = i;
        ans[sp][1] = N;
        ans[sp][2] = d;
    }
    cout << sp << endl;
    for (int i = 1; i <= sp; i++) {
        cout << ans[i][0] << ' ' << ans[i][1] << ' ' << ans[i][2] << endl;
    }
}

signed main() {
    fast_stream();
    int t;
    cin >> t;
    while (t--) {
        solve();
    }
}
/* Generated by powerful Codeforces Tool
 * Author: shaw
 * Time: 2022-03-08 22:35:01
 */
#pragma GCC optimize("Ofast", "inline", "-ffast-math")
#pragma GCC target("avx,sse2,sse3,sse4,mmx")
#include<bits/stdc++.h>
using namespace std;
void fast_stream() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
}
#define int long long
const int INF = 0x7fffffffffffffff;
const int MAXN = 2e5 + 9;
map<int, int> st;
void _erase(int x) {
    if (st.find(x) == st.end()) return;
    if (st[x] > 1) st[x] --;
    else st.erase(x);
}
void _insert(int x) {
    if (st.find(x) == st.end()) st.insert(make_pair(x, 0));
    st[x]++;
}
auto _begin() {
    return st.begin();
}
auto _end() {
    return st.end();
}

int arr[MAXN];
int Ans, N, D;
void __transform(int i) {
    int rm1 = arr[i] - arr[i-1] - 1, rm2 = arr[i+1] - arr[i] - 1;
    _erase(rm1), _erase(rm2), _insert(rm1 + rm2 + 1);
    int lg = (--_end())->first;
    if ((lg / 2 - (lg % 2 == 0)) > D - arr[N] - 1) {
        _erase(lg);
        _insert(lg / 2 - (lg % 2 == 0));
        Ans = max(Ans, _begin()->first);
        _insert(lg);
        int q = lg / 2 - (lg % 2 == 0);
        _erase(q);
    } else {
        _insert(D-arr[N]-1);
        Ans = max(Ans, _begin()->first);
        _erase(D-arr[N]-1);
    }
    _insert(rm1), _insert(rm2), _erase(rm1+rm2+1);
}

void __transform_N() {
    _erase(arr[N] - arr[N-1]-1);
    _insert(D - arr[N-1] - 1);

    int lg = (--_end())->first;
    _erase(lg);
    _insert(lg / 2 - (lg % 2) == 0);
    Ans = max(Ans, _begin()->first);
    _erase(lg / 2 - (lg % 2) == 0);
    _insert(lg);
    _erase(D - arr[N-1] - 1);
    _insert(arr[N] - arr[N] - 1);
}

void solve() {
    st.clear();
    cin >> N >> D;
    Ans = INF;
    arr[0] = 0;
    for (int i = 1; i <= N; i++) cin >> arr[i];
    for (int i = 1; i <= N; i++) _insert(arr[i] - arr[i-1]-1), Ans = min(Ans, arr[i] - arr[i-1] - 1);
    for (int i = 1; i < N; i++) {
        __transform(i);
    }
    __transform_N();
    cout << Ans << endl;
}

signed main() {
    fast_stream();
    int t;
    cin >> t;
    while (t--) solve();
}
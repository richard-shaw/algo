/* Generated by powerful Codeforces Tool
 * Author: shaw
 * Time: 2022-03-06 17:55:03
 */
#pragma GCC optimize("Ofast", "inline", "-ffast-math")
#pragma GCC target("avx,sse2,sse3,sse4,mmx")
#include<bits/stdc++.h>
using namespace std;
void fast_stream() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
}
#define int long long
const int INF = 0x7fffffffffffffff;
const int MAXN = 1e5 + 9;

struct Pos {
    int r, c;
};
vector<Pos> color[MAXN];
int d[MAXN], D[MAXN], DD[MAXN];
bool cmp_r(Pos &a, Pos &b) { return a.r < b.r; }
bool cmp_c(Pos &a, Pos &b) { return a.c < b.c; }

int get_sum(int c) {
    int ans = 0, L = color[c].size();
    sort(color[c].begin(), color[c].end(), cmp_r);
    for (int i = 1; i < L; i++) d[i] = color[c][i].r - color[c][i-1].r;
    D[1] = d[1];
    for (int i = 2; i < L; i++) D[i] = D[i-1] + d[i];
    DD[0] = 0, DD[1] = D[1];
    for (int i = 2; i < L; i++) DD[i] = DD[i-1] + D[i];
    for (int i = 1; i < L; i++) {
        ans += i * D[i] - DD[i-1];
    }

    sort(color[c].begin(), color[c].end(), cmp_c);
    for (int i = 1; i < L; i++) d[i] = color[c][i].c - color[c][i-1].c;
    D[1] = d[1];
    for (int i = 2; i < L; i++) D[i] = D[i-1] + d[i];
    DD[0] = 0, DD[1] = D[1];
    for (int i = 2; i < L; i++) DD[i] = DD[i-1] + D[i];
    for (int i = 1; i < L; i++) {
        ans += i * D[i] - DD[i-1];
    }
    return ans;
}

signed main() {
    fast_stream();
    for (int i = 1; i < MAXN; i++) color[i].clear();
    int n, m;
    cin >> n >> m;
    for (int r = 1; r <= n; r++) for (int c = 1; c <= m; c++) {
        int cl;
        cin >> cl;
        Pos pos;
        pos.r = r, pos.c = c;
        color[cl].push_back(pos);
    }

    int Ans = 0;
    for (int c = 1; c < MAXN; c++) {
        if (color[c].size() <= 1) continue;
        Ans += get_sum(c);
    }
    cout << Ans << endl;
}
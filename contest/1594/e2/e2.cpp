/* Generated by powerful Codeforces Tool
 * Author: RichardShaw
 * Time: 2021-10-09 10:27:19
 */
#pragma GCC optimize("Ofast", "inline", "-ffast-math")
#pragma GCC target("avx,sse2,sse3,sse4,mmx")
#include<bits/stdc++.h>
#define white 0
#define yellow 1
#define green 2
#define blue 3
#define red 4
#define orange 5
using namespace std;
void fast_stream() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
}
#define int long long
const int MOD = 1e9 + 7;
map<int, int> colored_nodes, dp_temps[6];
set<int> non_pure_nodes;
int K, M;
bool color_judge(int c1, int c2) {
    c1 = (c1 >> 1) << 1, c2 = (c2 >> 1) << 1;
    return c1 != c2;
}
int _(string color) {
    switch (color[0]) {
        case 'w': return white;
        case 'y': return yellow;
        case 'g': return green;
        case 'b': return blue;
        case 'r': return red;
        default: return orange;
    }
}
int pow_2(int k) { int ans = 1; return ans << k; }
int ex_pow(int a, int b) {
    int ans = 1, base = a;
    while (b > 0) {
        if (b & 1) ans = (ans * base) % MOD;
        base = (base * base) % MOD;
        b >>= 1;
    }
    return ans;
}
int level(int u) {
    int ans = 0;
    while (u > 0) ans++, u >>= 1;
    return ans;
}
int dp(int u, int c) {
    int _level = level(u);
    if (non_pure_nodes.find(u) == non_pure_nodes.end()) {
        return ex_pow(4, pow_2(K - _level + 1) - 2);
    }
    if (dp_temps[c].find(u) != dp_temps[c].end()) return dp_temps[c][u];
    auto iter = colored_nodes.find(u);
    if (iter != colored_nodes.end() && c != iter->second) {
        return dp_temps[c][u] = 0;
    } else {
        if (_level == K) return dp_temps[c][u] = 1;
        int ans1 = 0, ans2 = 0;
        for (int i = 0; i < 6; i++) {
            if (color_judge(i, c)) ans1 += dp(2 * u, i), ans2 += dp(2 * u + 1, i);
        }
        ans1 %= MOD, ans2 %= MOD;
        return dp_temps[c][u] = (ans1 * ans2) % MOD;
    }
}
signed main() {
//    clock_t t1 = clock();
    fast_stream();
    colored_nodes.clear(), non_pure_nodes.clear();
    for (int i = 0; i < 6; i++) dp_temps[i].clear();
    cin >> K >> M;
//    clock_t t0 = clock();
    for (int i = 1; i <= M; i++) {
        int u; string color;
        cin >> u >> color;
        colored_nodes.insert({u, _(color)});
        while (u > 0) non_pure_nodes.insert(u), u >>= 1;
    }
    int ans = 0;
    for (int i = 0; i < 6; i++) {
        ans = (ans + dp(1, i)) % MOD;
    }
    cout << ans << endl;
//    clock_t t2 = clock();
//    cout << ((double) (t0 - t1) / CLOCKS_PER_SEC) << endl;
//    cout << ((double) (t2 - t0) / CLOCKS_PER_SEC) << endl;
//    cout << ((double) (t2 - t1) / CLOCKS_PER_SEC) << endl;
}
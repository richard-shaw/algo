/* Generated by powerful Codeforces Tool
 * Author: RichardShaw
 * Time: 2021-10-02 00:15:52
 */
//#pragma GCC optimize("Ofast", "inline", "-ffast-math")
//#pragma GCC target("avx,sse2,sse3,sse4,mmx")
#include<bits/stdc++.h>
using namespace std;
void fast_stream() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
}
#define int long long
const int INF = 0x7fffffffffffffff;
const int MAXN = 2e5 + 9;
struct Equ { int v, id; } equ[11][MAXN];
bool cmp(Equ &a, Equ &b) { return a.v > b.v; }
int c[MAXN], n, m, banA[MAXN][11];
set<string> ban;
string flag(vector<int> &v) {
    string rs = "";
    for (auto i : v) rs.append("_").append(to_string(i));
    return rs;
}
string __flag(vector<int> &v) {
    string rs = "";
    for (int i = 0; i < n; i++) rs.append("_").append(to_string(equ[i+1][v[i]].id));
    return rs;
}
int sum(vector<int> &ids) {
    int s = 0;
    for (int i = 0; i < n; i++) s += equ[i + 1][ids[i]].v;
    return s;
}
signed main() {
    fast_stream();
    ban.clear();
    cin >> n;
    vector<int> tmp; tmp.clear();
    for (int i = 1; i <= n; i++) {
        cin >> c[i];
        for (int j = 1; j <= c[i]; j++) cin >> equ[i][j].v, equ[i][j].id = j;
        sort(equ[i] + 1, equ[i] + 1 + c[i], cmp);
        tmp.push_back(1);
    }
    cin >> m;
    for (int i = 1; i <= m; i++) {
        vector<int> _ban; _ban.clear();
        for (int j = 1; j <= n; j++) {
            cin >> banA[i][j]; _ban.push_back(banA[i][j]);
        }
        ban.insert(flag(_ban));
    }
    if (ban.find(__flag(tmp)) == ban.end()) {
        for (int i = 1; i < n; i++) cout << equ[i][tmp[i-1]].id << ' ';
        cout << equ[n][tmp[n-1]].id << endl;
        return 0;
    } else {
        int MX = -INF;
        vector<int> Ans;
        for (int i = 1; i <= m; i++) {
            vector<int> q;q.clear();
            for (int j = 1; j <= n; j++) q.push_back(banA[i][j]);
            for (int j = 1; j <= n; j++) {
                vector<int> Q(q);
                if (Q[j-1] == c[j]) continue;
                Q[j-1]++;
                if (ban.find(__flag(Q)) != ban.end()) continue;
                if (MX < sum(Q)) MX = sum(Q), Ans = Q;
            }
        }
        for (int i = 1; i < n; i++) cout << equ[i][Ans[i-1]].id << ' ';
        cout << equ[n][Ans[n-1]].id << endl;
    }
}
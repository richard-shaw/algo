/* Generated by powerful Codeforces Tool
 * Author: RichardShaw
 * Time: 2021-10-02 00:15:52
 */
#pragma GCC optimize("Ofast", "inline", "-ffast-math")
#pragma GCC target("avx,sse2,sse3,sse4,mmx")
#include<bits/stdc++.h>
using namespace std;
void fast_stream() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
}
#define int long long
#define min(a, b) (a < b ? a : b)
const int INF = 0x7ffffffffffffff;
const int MAXN = 2e5 + 9;
int arr[MAXN], n, s = 0;

int L(int x) {
    int idx = lower_bound(arr, arr + n, x) - arr;
    return idx == n ? INF : arr[idx];
}
int R(int x) {
    int idx = lower_bound(arr, arr + n, x + 1) - arr; idx --;
    return idx < 0 ? INF : arr[idx];
}

void solve() {
    int x, y, ans = INF; cin >> x >> y; y = s - y;
    if (x == y) {
        if (R(x) != INF) ans = min(ans, x - R(x));
        if (L(x) != INF) ans = min(ans, L(x) - y);
    } else if (x < y) {
        if (R(x) != INF) ans = min(ans, x - R(x));
        if (L(y) != INF) ans = min(ans, L(y) - y);
        if (!(arr[n-1] < x || arr[0] > y)) ans = 0;
    } else {
        if (R(y) != INF) ans = min(ans, x - R(y));
        if (L(x) != INF) ans = min(ans, L(x) - y);
        if (!(arr[n-1] < y || arr[0] > x)) ans = min(ans, x - y);
    }
    cout << ans << endl;
}

signed main() {
    fast_stream();
    cin >> n;
    for (int i = 0; i < n; i++) cin >> arr[i], s += arr[i];
    sort(arr, arr + n);
    int t;
    cin >> t;
    while (t--) {
        solve();
    }
}
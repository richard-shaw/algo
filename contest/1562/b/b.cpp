/* Generated by powerful Codeforces Tool
 * Author: RichardShaw
 * Time: 2021-08-26 22:35:02
 */

#include<bits/stdc++.h>
using namespace std;
void fast_stream() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
}
#define int long long
const int INF = 0x7fffffffffffffff;
const int MAXN = 2e5 + 9;
int dg[55], Q[4] = {2, 3, 5, 7};

int mn = INF, rs;
bool ok(int s) {
    if (s == 1) return true;
    for (int i = 2; i * i <= s; i++) {
        if (s % i == 0) return true;
    }
    return false;
}
void dfs(int j, int sum, vector<int> vec, int t) {
    if (t >= vec.size()) {
        if (sum != 0 && j < mn && ok(sum)) {
            mn = j;
            rs = sum;
        }
        return;
    }
    dfs(j, sum, vec, t+1);
    dfs(j+1, sum*10+vec[t], vec, t+1);
}

bool sv_p(int N) {
    int ns[10];
    memset(ns, 0, sizeof(ns));
    for (int i = 0; i < N; i++) {
        ns[dg[i]] ++;
        if (dg[i] % 2 == 0 && dg[i] > 2) {
            cout << 1 << endl << dg[i] << endl;
            return true;
        }
        if (dg[i] == 1 || dg[i] == 9) {
            cout << 1 << endl << dg[i] << endl;
            return true;
        }
    }
    for (int i = 0; i < 4; i++) {
        int d = Q[i];
        if (ns[d] >= 2) {
            cout << 2 << endl << d << d << endl;
            return true;
        }
    }
    int s = 0;
    for (int i = 0; i < N; i++) {
        if (dg[i] == 2 || dg[i] == 3 || dg[i] == 5 || dg[i] == 7) s = 10 * s + dg[i];
    }
    mn = INF;
    vector<int> vec;
    for (int i = 0; i < N; i++) {
        if (dg[i] == 2 || dg[i] == 3 || dg[i] == 5 || dg[i] == 7) vec.push_back(dg[i]);
    }
    dfs(0, 0, vec, 0);
    cout << mn <<endl << rs << endl;
    return false;
}


void solve () {
    int N;
    cin >> N;
    string s;
    cin >> s;
    for (int i = 0; i < N; i++) {
        dg[i] = (s[i] - '0') % 10;
    }
    if(sv_p(N)) return;
}

signed main() {
    fast_stream();
    int t;
    cin >> t;
    while (t--) {
        solve();
    }

}